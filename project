import React, { useState, useEffect } from "react";
import axios from "axios";
import "./App.css";

function App() {
  const [searchName, setSearchName] = useState("");
  const [searchDimension, setSearchDimension] = useState("");
  const [item, setItem] = useState(null);
  const [searchError, setSearchError] = useState("");
  const [verificationMessage, setVerificationMessage] = useState("");
  const [addUpdateMessage, setAddUpdateMessage] = useState("");
  const [formError, setFormError] = useState("");
  const [form, setForm] = useState({ name: "", dimension: "" });
  const [items, setItems] = useState([]);

 
  // 컴포넌트 마운트 시 전체 품번 목록 조회
  // 서버 GET /items API 호출
  
  useEffect(() => {
    const fetchItems = async () => {
      try {
        const res = await axios.get("http://localhost:5000/items");
        setItems(res.data);
      } catch (err) {
        setFormError("품번 목록을 불러오는데 실패했습니다.");
      }
    };
    fetchItems();
  }, []);

  // 품번 검색 및 치수 검증
  // 품번으로 데이터 조회
  // 치수 입력 시 검증 API 호출
  // 검증 결과 표시
  
  const handleSearch = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/items/${searchName}`);
      setItem(res.data);
      setSearchError("");

      if (searchDimension) {
        const verifyRes = await axios.post(
          "http://localhost:5000/items/verify",
          {
            name: searchName,
            inputDimension: searchDimension,
          }
        );
        setVerificationMessage(verifyRes.data.message);
      }
    } catch (err) {
      setSearchError("해당 품번을 찾을 수 없습니다.");
      setItem(null);
    }
  };


  //  -  품번 추가/수정 처리  -
  // 기존 품번 확인 후 PUT 또는 POST 요청
  // mm 단위 자동 추가
  // 성공/실패 메시지 표시
   
  const handleAddOrUpdate = async () => {
    try {
      const existingItem = items.find(
        (i) => i.name.toUpperCase() === form.name.toUpperCase()
      );

      const formattedDimension = form.dimension.includes("mm")
        ? form.dimension
        : `${form.dimension}mm`;

      const formData = {
        ...form,
        dimension: formattedDimension,
      };

      if (existingItem) {
        await axios.put(
          `http://localhost:5000/items/${existingItem.id}`,
          formData
        );
        setAddUpdateMessage("품번이 수정되었습니다.");
      } else {
        await axios.post("http://localhost:5000/items", formData);
        setAddUpdateMessage("품번이 추가되었습니다.");
      }
      setForm({ name: "", dimension: "" });
      setFormError("");
      if (item && item.id === form.id) {
        handleSearch();
      }
    } catch (err) {
      setFormError(
        err.response?.data?.error || "요청 처리 중 오류가 발생했습니다."
      );
    }
  };


  //  - 품번 삭제 -
  //  DELETE API를 호출함
  //  삭제 후 목록 갱신

 
  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:5000/items/${id}`);
      setAddUpdateMessage("품번이 삭제되었습니다.");
      setItem(null);
      setForm({ name: "", dimension: "" });
      const res = await axios.get("http://localhost:5000/items");
      setItems(res.data);
    } catch (err) {
      setSearchError("품번 삭제 중 오류가 발생했습니다.");
    }
  };

  const handleEdit = (selectedItem) => {
    setForm(selectedItem);
    setAddUpdateMessage("");
    setFormError("");
  };

  const handleCancel = () => {
    setForm({ name: "", dimension: "" });
    setAddUpdateMessage("");
    setFormError("");
  };


 
  return (
    <div className="container">
      <h1>스마트 품질 관리 시스템</h1>

      <div className="section">
        <h2>품번 목록</h2>
        <div className="search-box">
          <div>
            <input
              type="text"
              placeholder="품번 입력 (A, B, C, D, E)"
              value={searchName}
              onChange={(e) => setSearchName(e.target.value)}
            />
            <input
              type="text"
              placeholder="치수 입력 (예: 90mm)"
              value={searchDimension}
              onChange={(e) => setSearchDimension(e.target.value)}
            />
            <button onClick={handleSearch}>조회하기</button>
          </div>
        </div>

        {searchError && <p className="message error">{searchError}</p>}

        {item && (
          <div className="result">
            <h3>조회 결과</h3>
            <p>품번: {item.name}</p>
            <p>기준 치수: {item.dimension}</p>
            {verificationMessage && (
              <p className="verification-message">{verificationMessage}</p>
            )}
            <button onClick={() => handleDelete(item.id)}>삭제</button>
          </div>
        )}
      </div>

      <div className="section">
        <h2>품번 {form.id ? "수정" : "추가/수정"}</h2>
        <div className="form">
          <input
            type="text"
            placeholder="품번 입력"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />
          <input
            type="text"
            placeholder="치수 입력 (예: 90mm)"
            value={form.dimension}
            onChange={(e) => setForm({ ...form, dimension: e.target.value })}
          />
          <button onClick={handleAddOrUpdate}>추가/수정 하기</button>
          {form.id && <button onClick={handleCancel}>취소</button>}
        </div>
        {formError && <p className="message error">{formError}</p>}
        {addUpdateMessage && (
          <p className="message success">{addUpdateMessage}</p>
        )}
      </div>
    </div>
  );
}

export default App;
